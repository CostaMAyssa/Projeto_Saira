#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://svkgfvfhmngcvfsjpero.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN2a2dmdmZobW5nY3Zmc2pwZXJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5MDAwMDAsImV4cCI6MjA2OTQ3NjAwMH0.test';
const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üß™ Testando duplica√ß√£o de mensagens...\n');

// Fun√ß√£o para testar se h√° mensagens duplicadas
async function testMessageDuplication() {
  try {
    // Buscar todas as mensagens
    const { data: messages, error } = await supabase
      .from('messages')
      .select('*')
      .order('sent_at', { ascending: true });

    if (error) {
      console.error('‚ùå Erro ao buscar mensagens:', error);
      return;
    }

    console.log(`üìä Total de mensagens: ${messages.length}`);

    // Verificar duplica√ß√µes por ID
    const messageIds = messages.map(m => m.id);
    const uniqueIds = new Set(messageIds);
    
    if (messageIds.length !== uniqueIds.size) {
      console.log('‚ö†Ô∏è DUPLICA√á√ïES ENCONTRADAS POR ID!');
      console.log(`   Total: ${messageIds.length}`);
      console.log(`   √önicos: ${uniqueIds.size}`);
      console.log(`   Duplicados: ${messageIds.length - uniqueIds.size}`);
    } else {
      console.log('‚úÖ Nenhuma duplica√ß√£o por ID encontrada');
    }

    // Verificar duplica√ß√µes por conte√∫do e timestamp
    const contentGroups = {};
    messages.forEach(msg => {
      const key = `${msg.content}_${msg.sent_at}_${msg.sender}`;
      if (!contentGroups[key]) {
        contentGroups[key] = [];
      }
      contentGroups[key].push(msg);
    });

    const duplicates = Object.values(contentGroups).filter(group => group.length > 1);
    
    if (duplicates.length > 0) {
      console.log('‚ö†Ô∏è DUPLICA√á√ïES ENCONTRADAS POR CONTE√öDO!');
      duplicates.forEach((group, index) => {
        console.log(`   Grupo ${index + 1}:`);
        group.forEach(msg => {
          console.log(`     ID: ${msg.id}, Conte√∫do: "${msg.content}", Timestamp: ${msg.sent_at}`);
        });
      });
    } else {
      console.log('‚úÖ Nenhuma duplica√ß√£o por conte√∫do encontrada');
    }

    // Verificar mensagens recentes
    const recentMessages = messages.filter(m => {
      const messageTime = new Date(m.sent_at);
      const now = new Date();
      const diffHours = (now - messageTime) / (1000 * 60 * 60);
      return diffHours < 1; // √öltima hora
    });

    console.log(`\nüì± Mensagens da √∫ltima hora: ${recentMessages.length}`);
    recentMessages.forEach(msg => {
      console.log(`   ${msg.sent_at}: "${msg.content}" (${msg.sender})`);
    });

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testMessageDuplication(); 