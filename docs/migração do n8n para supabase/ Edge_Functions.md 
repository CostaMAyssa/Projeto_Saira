

### 1. **send-message**
- **Função:** Responsável por **enviar mensagens** (texto, imagem, áudio, documento) do seu sistema para o WhatsApp via Evolution API.
- **Como funciona:** Recebe uma requisição do frontend (ou backend), processa o payload (mensagem, arquivo, etc.), faz upload para o Supabase Storage se necessário, e chama a Evolution API para entregar a mensagem ao destinatário no WhatsApp.
- **Fluxo:** Frontend → `send-message` → Evolution API → WhatsApp do cliente.

---

### 2. **receive-message**
- **Função:** (Provavelmente) responsável por **processar mensagens recebidas** do WhatsApp, caso você tenha um fluxo alternativo de recebimento além do webhook.
- **Como funciona:** Pode ser chamada manualmente ou por outro serviço para registrar mensagens recebidas, mas normalmente o correto é usar o webhook (`webhook-receiver`).
- **Observação:** Em muitos projetos, essa função é redundante se o webhook estiver funcionando corretamente.

---

### 3. **register-sale**
- **Função:** Responsável por **registrar vendas** de produtos para qualquer cliente do sistema, de forma centralizada e auditável.
- **Como funciona:** Recebe uma requisição HTTP POST com os dados da venda (cliente, usuário, itens, total), registra a venda na tabela `sales`, insere os itens em `sale_items`, atualiza o estoque dos produtos vendidos e atualiza/cria o relacionamento cliente-produto (`last_purchase`).
- **Fluxo:** Qualquer interface (chat, painel, API) → `register-sale` → Supabase (`sales`, `sale_items`, `products`, `client_product_associations`).
- **Vantagens:** Garante integridade dos dados, evita duplicidade de lógica, funciona para todos os clientes e produtos do sistema, pronto para integrações futuras (relatórios, automações, etc).

---


### 4. **webhook-receiver**
- **Função:** **Recebe webhooks** da Evolution API quando chegam novas mensagens do WhatsApp (ou outros eventos configurados).
- **Como funciona:** A Evolution API faz uma requisição HTTP para essa função sempre que chega uma mensagem nova. A função processa o payload, identifica o cliente, cria a conversa se necessário, salva a mensagem na tabela `messages` e atualiza a tabela `conversations`.
- **Fluxo:** WhatsApp do cliente → Evolution API → `webhook-receiver` → Supabase (tabelas `clients`, `conversations`, `messages`).

---

